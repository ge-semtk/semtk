server.port=${PORT_NODEGROUPEXECUTION_SERVICE}
server.ssl.enabled=${SSL_ENABLED}
server.ssl.key-store-type=${SSL_KEY_STORE_TYPE}
server.ssl.key-store=${SSL_KEY_STORE}
server.ssl.key-store-password=${SSL_KEY_STORE_PASSWORD}

spring.jackson.mapper.accept-case-insensitive-properties=true
spring.mvc.pathmatch.matching-strategy=ant_path_matcher

auth.settingsFilePath=${AUTH_SETTINGS_FILE_PATH}
auth.logPath=${AUTH_LOG_PATH}
auth.refreshFreqSeconds=${AUTH_REFRESH_FREQ_SEC}
auth.usernameKey=${AUTH_USERNAME_KEY}
auth.groupKey=${AUTH_GROUP_KEY}

ngstore.service.protocol=${NODEGROUPSTORE_SERVICE_PROTOCOL}
ngstore.service.server=${NODEGROUPSTORE_SERVICE_HOST}
ngstore.service.port=${PORT_NODEGROUPSTORE_SERVICE}
dispatch.service.protocol=${DISPATCH_SERVICE_PROTOCOL}
dispatch.service.server=${DISPATCH_SERVICE_HOST}
dispatch.service.port=${PORT_DISPATCH_SERVICE}
results.service.protocol=${RESULTS_SERVICE_PROTOCOL}
results.service.server=${RESULTS_SERVICE_HOST}
results.service.port=${PORT_SPARQLGRAPH_RESULTS_SERVICE}
status.service.protocol=${STATUS_SERVICE_PROTOCOL}
status.service.server=${STATUS_SERVICE_HOST}
status.service.port=${PORT_SPARQLGRAPH_STATUS_SERVICE}
ingest.service.protocol=${INGESTION_SERVICE_PROTOCOL}
ingest.service.server=${INGESTION_SERVICE_HOST}
ingest.service.port=${PORT_INGESTION_SERVICE}
oinfo.service.protocol=${ONTOLOGYINFO_SERVICE_PROTOCOL}
oinfo.service.server=${ONTOLOGYINFO_SERVICE_HOST}
oinfo.service.port=${PORT_ONTOLOGYINFO_SERVICE}

neptuneupload.s3ClientRegion=${NEPTUNE_UPLOAD_S3_CLIENT_REGION}
neptuneupload.s3BucketName=${NEPTUNE_UPLOAD_S3_BUCKET_NAME}
neptuneupload.awsIamRoleArn=${NEPTUNE_UPLOAD_S3_AWS_IAM_ROLE_ARN}

servicesgraph.endpointType=${SERVICES_DATASET_ENDPOINT_TYPE}
servicesgraph.endpointDomain=${SERVICES_DATASET_DOMAIN}
servicesgraph.endpointServerUrl=${SERVICES_DATASET_SERVER_URL}
servicesgraph.endpointDataset=${SERVICES_DATASET}
servicesgraph.endpointUsername=${SERVICES_DATASET_USER}
servicesgraph.endpointPassword=${SERVICES_DATASET_PASSWORD}

logging.loggingEnabled=${nodeGroupExecutionLoggingEnabled}
logging.loggingProtocol=${LOGGING_SERVICE_PROTOCOL}
logging.loggingServer=${LOGGING_SERVICE_HOST}
logging.loggingPort=${LOGGING_SERVICE_PORT}
logging.loggingServiceLocation=${LOGGING_SERVICE_ENDPOINT}
logging.applicationLogName=${nodeGroupExecutionApplicationLogName}
