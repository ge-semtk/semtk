/**
 ** Copyright 2016 General Electric Company
 **
 **
 ** Licensed under the Apache License, Version 2.0 (the "License");
 ** you may not use this file except in compliance with the License.
 ** You may obtain a copy of the License at
 ** 
 **     http://www.apache.org/licenses/LICENSE-2.0
 ** 
 ** Unless required by applicable law or agreed to in writing, software
 ** distributed under the License is distributed on an "AS IS" BASIS,
 ** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 ** See the License for the specific language governing permissions and
 ** limitations under the License.
 */

package com.ge.research.semtk.services.nodegroupStore.service;

import javax.validation.constraints.NotNull;

import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import com.ge.research.semtk.services.nodegroupStore.NgStore;
import com.ge.research.semtk.utility.LocalLogger;

import io.swagger.v3.oas.annotations.media.Schema;

public class StoreNodeGroupRequest {

	@Schema(
			description="Deprecated version of item",
			requiredMode = Schema.RequiredMode.NOT_REQUIRED,
			example="{ nodegroup json }"
			)
	private String jsonRenderedNodeGroup;   // legacy
	@Schema(
			description="Item json string",
			requiredMode = Schema.RequiredMode.NOT_REQUIRED,
			example="{ json }"
			)private String item;                    // newer
	@NotNull
	@Schema(
			description="Item name",
			requiredMode = Schema.RequiredMode.REQUIRED,
			example="my item"
			)
	private String name;
	@NotNull
	@Schema(
			description="Longer comments",
			requiredMode = Schema.RequiredMode.REQUIRED,
			example="this is a nice piece of json"
			)
	private String comments;
	@NotNull
	@Schema(
			description="An identifier of the owner",
			requiredMode = Schema.RequiredMode.REQUIRED,
			example="person27"
			)
	private String creator;
	@Schema(
			description="Allow silent overwrite: default false",
			requiredMode = Schema.RequiredMode.NOT_REQUIRED,
			example="false"
			)
	private boolean overwriteFlag = false;
	
	private NgStore.StoredItemTypes itemType = NgStore.StoredItemTypes.PrefabNodeGroup;
	
	// creation date will be auto-generated by the service
		
	public JSONObject buildNodeGroupJson() throws Exception {
	
		JSONParser prsr = new JSONParser();
		JSONObject retval = null;
		
		try {
			retval = (JSONObject) prsr.parse(this.getItem());
		} catch (ParseException e) {
			e.printStackTrace();
			throw new Exception("Error parsing nodegroup for '" + this.getName() + "':" + e.toString());
		}
		return retval;
	}

	/**
	 * Validate the request.  Throw exception if there is a problem.
	 */
	public void validate() throws Exception {
		
		if(this.getItem() == null || this.getItem().trim().isEmpty()){
			throw new Exception("Invalid request to store node group: node group is not provided, or is empty");
		}
		// provide nice English errors
		if (this.name == null || this.name.isBlank()) throw new Exception("Invalid request to store nodegroup: nodegroup name is blank");
		if (this.comments == null) throw new Exception("Invalid request to store nodegroup: comments are null");

		if (this.creator == null) throw new Exception("Invalid request to store nodegroup: creator is null");

	}
	public String getJsonRenderedNodeGroup() {
		return jsonRenderedNodeGroup;
	}

	public void setJsonRenderedNodeGroup(String jsonRenderedNodeGroup) {
		this.jsonRenderedNodeGroup = jsonRenderedNodeGroup;
	}
	/**
	 * Returns item or legacy jsonRenderedNodegroup
	 * @return
	 */
	public String getItem() {
		return this.item != null ? this.item : this.jsonRenderedNodeGroup;
	}
	
	public String getName() {
		return name;
	}
	
	public String getComments() {
		return comments;
	}
	
	public String getCreator() {
		return creator;
	}

	public NgStore.StoredItemTypes getItemType() throws Exception {
		return this.itemType;
	}
	
	public boolean getOverwriteFlag() {
		return this.overwriteFlag;
	}
}
